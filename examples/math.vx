
; r0 -> return r1 factoriel
factoriel:
        ifeq r1 1
                jmp factoriel_base
        push r1
        sub r1 1
        call factoriel
        pop r1
        mul r0 r1
        return

factoriel_base:
        mov r0 1
        return

; r0 -> returns r1 to the power of r2
pow:
        iflt r2 0
                return
        mov r0 1
pow_loop:
        mulf r0 r1 
        subf r2 1 
        ifgt r2 0
                jmp pow_loop
        return

; r0 -> return sin(x)
; r1 -> x
sin:
        mov r2 3
        call power_over_factoriel
        push r0

        mov r2 5
        call power_over_factoriel
        push r0

        mov r2 7
        call power_over_factoriel
        push r0

        mov r2 11
        call power_over_factoriel
        push r0

        mov r0 r1

        pop r5          ; x ^ 11 / 11!
        pop r4          ; x ^ 7 / 7!
        pop r3          ; x ^ 5 / 5!
        pop r2          ; x ^ 3 / 3!
        
        subf r0 r2
        addf r0 r3
        subf r0 r4
        addf r0 r5

        return

; r0 -> return cos(x)
; r1 -> x
cos:
        mov r2 2
        call power_over_factoriel
        push r0

        mov r2 4
        call power_over_factoriel
        push r0

        mov r2 6
        call power_over_factoriel
        push r0

        mov r2 8
        call power_over_factoriel
        push r0

        mov r0 1

        pop r5          ; x ^ 8 / 8!
        pop r4          ; x ^ 6 / 6!
        pop r3          ; x ^ 4 / 4!
        pop r2          ; x ^ 2 / 2!
        
        subf r0 r2
        addf r0 r3
        subf r0 r4
        addf r0 r5

        return


; r0 -> computes the value x^n / n!
; r1 -> x (unchanged)
; r2 -> n (unchanged)
power_over_factoriel:
        push r1         ; x
        push r2         ; n
        call pow
        pop r1          ; n
        push r0         ; x^n
        push r1         ; n
        call factoriel

        pop r2          ; n
        pop r3          ; x^n

        divf r3 r0       
        mov r0 r3
        pop r1          ; x
        return

; r0 -> an approximation of PI
pi:
        mov r0 22
        mov r1 7
        divf r0 r1
        return 
        
        
main:
        mov r1 5
        call factoriel
        print r0

        mov r1 3
        mov r2 5
        call pow
        print r0

        call pi
        mov r1 1
        mov r2 3
        divf r1 r2

        mulf r1 r0       ; pi * 1/3
        call sin
        print r0

        call pi
        mov r1 1
        mov r2 4
        divf r1 r2
        
        mulf r1 r0       ; pi * 1/4
        call cos
        print r0

